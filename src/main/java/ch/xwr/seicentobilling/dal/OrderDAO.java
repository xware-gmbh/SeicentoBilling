
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.Customer;
import ch.xwr.seicentobilling.entities.Order;
import ch.xwr.seicentobilling.entities.Order_;
import ch.xwr.seicentobilling.entities.Project;

/**
 * Home object for domain model class Order.
 *
 * @see Order
 */
public class OrderDAO extends JpaDataAccessObject.Default<Order, Long> {
	public OrderDAO() {
		super(Order.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Order> findByCustomer(final Customer dao) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<Customer> daoParameter = criteriaBuilder.parameter(Customer.class, "dao");

		final CriteriaQuery<Order> criteriaQuery = criteriaBuilder.createQuery(Order.class);

		final Root<Order> root = criteriaQuery.from(Order.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Order_.customer), daoParameter));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Order_.ordBillDate)),
				criteriaBuilder.asc(root.get(Order_.ordNumber)));

		final TypedQuery<Order> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Order> findByProject(final Project dao) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<Project> daoParameter = criteriaBuilder.parameter(Project.class, "dao");

		final CriteriaQuery<Order> criteriaQuery = criteriaBuilder.createQuery(Order.class);

		final Root<Order> root = criteriaQuery.from(Order.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Order_.project), daoParameter));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Order_.ordBillDate)),
				criteriaBuilder.asc(root.get(Order_.ordNumber)));

		final TypedQuery<Order> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(daoParameter, dao);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Order> findOrdersNotBooked() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<Order> criteriaQuery = criteriaBuilder.createQuery(Order.class);

		final Root<Order> root = criteriaQuery.from(Order.class);

		criteriaQuery.where(criteriaBuilder.and(criteriaBuilder.isNull(root.get(Order_.ordBookedOn)),
				criteriaBuilder.equal(root.get(Order_.ordState), criteriaBuilder.literal(1))));

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(Order_.ordBillDate)),
				criteriaBuilder.asc(root.get(Order_.ordNumber)));

		final TypedQuery<Order> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Order> findByBillNumber(final int ordNumber) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<Integer> ordNumberParameter = criteriaBuilder.parameter(Integer.class, "ordNumber");

		final CriteriaQuery<Order> criteriaQuery = criteriaBuilder.createQuery(Order.class);

		final Root<Order> root = criteriaQuery.from(Order.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Order_.ordNumber), ordNumberParameter));

		final TypedQuery<Order> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(ordNumberParameter, ordNumber);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Order> findOrdersNotPaid() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<Order> criteriaQuery = criteriaBuilder.createQuery(Order.class);

		final Root<Order> root = criteriaQuery.from(Order.class);

		criteriaQuery.where(criteriaBuilder.and(criteriaBuilder.isNull(root.get(Order_.ordPayDate)),
				criteriaBuilder.equal(root.get(Order_.ordState), criteriaBuilder.literal(1))));

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(Order_.ordBillDate)),
				criteriaBuilder.asc(root.get(Order_.ordNumber)));

		final TypedQuery<Order> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}
}