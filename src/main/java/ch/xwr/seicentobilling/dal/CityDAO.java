
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.City;
import ch.xwr.seicentobilling.entities.City_;

/**
 * Home object for domain model class City.
 *
 * @see City
 */
public class CityDAO extends JpaDataAccessObject.Default<City, Long> {
	public CityDAO() {
		super(City.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<City> findByName(final String name) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<String> nameParameter = criteriaBuilder.parameter(String.class, "name");

		final CriteriaQuery<City> criteriaQuery = criteriaBuilder.createQuery(City.class);

		final Root<City> root = criteriaQuery.from(City.class);

		criteriaQuery.where(criteriaBuilder.and(criteriaBuilder.equal(root.get(City_.ctyName), nameParameter),
				criteriaBuilder.equal(root.get(City_.ctyState), criteriaBuilder.literal(1))));

		final TypedQuery<City> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(nameParameter, name);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<City> findByZip(final int zip) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<Integer> zipParameter = criteriaBuilder.parameter(Integer.class, "zip");

		final CriteriaQuery<City> criteriaQuery = criteriaBuilder.createQuery(City.class);

		final Root<City> root = criteriaQuery.from(City.class);

		criteriaQuery.where(criteriaBuilder.and(criteriaBuilder.equal(root.get(City_.ctyZip), zipParameter),
				criteriaBuilder.equal(root.get(City_.ctyState), criteriaBuilder.literal(1))));

		final TypedQuery<City> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(zipParameter, zip);
		return query.getResultList();
	}
}