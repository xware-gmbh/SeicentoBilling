
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.RowObject;
import ch.xwr.seicentobilling.entities.RowParameter;
import ch.xwr.seicentobilling.entities.RowParameter_;


/**
 * Home object for domain model class RowParameter.
 *
 * @see RowParameter
 */
public class RowParameterDAO extends JpaDataAccessObject.Default<RowParameter, Long>
{
	public RowParameterDAO()
	{
		super(RowParameter.class);
	}

	public RowParameter getParameter(final RowObject root, final String groups, final String subgroup, final String key)
	{
		final List<RowParameter> li = this.findByObject(root, groups, subgroup, key);
		if(li.size() == 0)
		{
			return null;
		}
		return li.get(0);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<RowParameter>
		findByObject(final RowObject rowObj, final String groups, final String subgroup, final String key)
	{
		final EntityManager entityManager = this.em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<RowObject> rowObjParameter   = criteriaBuilder.parameter(RowObject.class, "rowObj");
		final ParameterExpression<String>    groupsParameter   = criteriaBuilder.parameter(String.class, "groups");
		final ParameterExpression<String>    subgroupParameter = criteriaBuilder.parameter(String.class, "subgroup");
		final ParameterExpression<String>    keyParameter      = criteriaBuilder.parameter(String.class, "key");

		final CriteriaQuery<RowParameter> criteriaQuery = criteriaBuilder.createQuery(RowParameter.class);

		final Root<RowParameter> root = criteriaQuery.from(RowParameter.class);

		criteriaQuery.where(criteriaBuilder.and(
			criteriaBuilder.and(
				criteriaBuilder.and(criteriaBuilder.equal(root.get(RowParameter_.rowObject), rowObjParameter),
					criteriaBuilder.equal(root.get(RowParameter_.prmGroup), groupsParameter)),
				criteriaBuilder.equal(root.get(RowParameter_.prmSubGroup), subgroupParameter)),
			criteriaBuilder.equal(root.get(RowParameter_.prmKey), keyParameter)));

		final TypedQuery<RowParameter> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(rowObjParameter, rowObj);
		query.setParameter(groupsParameter, groups);
		query.setParameter(subgroupParameter, subgroup);
		query.setParameter(keyParameter, key);
		return query.getResultList();
	}
	
	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<RowParameter> findByObject(final RowObject rowObj)
	{
		final EntityManager entityManager = this.em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<RowObject> rowObjParameter = criteriaBuilder.parameter(RowObject.class, "rowObj");

		final CriteriaQuery<RowParameter> criteriaQuery = criteriaBuilder.createQuery(RowParameter.class);

		final Root<RowParameter> root = criteriaQuery.from(RowParameter.class);

		criteriaQuery.where(
			criteriaBuilder.equal(root.get(RowParameter_.rowObject), rowObjParameter));

		final TypedQuery<RowParameter> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(rowObjParameter, rowObj);
		return query.getResultList();
	}
}
