
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.CostAccount;
import ch.xwr.seicentobilling.entities.Periode;
import ch.xwr.seicentobilling.entities.Periode_;

/**
 * Home object for domain model class Periode.
 *
 * @see Periode
 */
public class PeriodeDAO extends JpaDataAccessObject.Default<Periode, Long> {
	public PeriodeDAO() {
		super(Periode.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Periode> findByCostAccount(final CostAccount costaccount) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<CostAccount> costaccountParameter = criteriaBuilder.parameter(CostAccount.class,
				"costaccount");

		final CriteriaQuery<Periode> criteriaQuery = criteriaBuilder.createQuery(Periode.class);

		final Root<Periode> root = criteriaQuery.from(Periode.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Periode_.costAccount), costaccountParameter));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Periode_.perYear)),
				criteriaBuilder.desc(root.get(Periode_.perMonth)));

		final TypedQuery<Periode> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(costaccountParameter, costaccount);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Periode> findByCostAccountOpenPeriode(final CostAccount costaccount) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<CostAccount> costaccountParameter = criteriaBuilder.parameter(CostAccount.class,
				"costaccount");

		final CriteriaQuery<Periode> criteriaQuery = criteriaBuilder.createQuery(Periode.class);

		final Root<Periode> root = criteriaQuery.from(Periode.class);

		criteriaQuery.where(criteriaBuilder.and(
				criteriaBuilder.and(criteriaBuilder.equal(root.get(Periode_.costAccount), costaccountParameter),
						criteriaBuilder.equal(root.get(Periode_.perBookedExpense), criteriaBuilder.literal(0))),
				criteriaBuilder.equal(root.get(Periode_.perState), criteriaBuilder.literal(1))));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Periode_.perYear)),
				criteriaBuilder.desc(root.get(Periode_.perMonth)));

		final TypedQuery<Periode> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(costaccountParameter, costaccount);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Periode> findByCostAccountTop(final CostAccount costaccount, final int icount) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<CostAccount> costaccountParameter = criteriaBuilder.parameter(CostAccount.class,
				"costaccount");

		final CriteriaQuery<Periode> criteriaQuery = criteriaBuilder.createQuery(Periode.class);

		final Root<Periode> root = criteriaQuery.from(Periode.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Periode_.costAccount), costaccountParameter));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Periode_.perYear)),
				criteriaBuilder.desc(root.get(Periode_.perMonth)));

		final TypedQuery<Periode> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(costaccountParameter, costaccount);
		query.setMaxResults(icount);
		return query.getResultList();
	}
}