
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.PaymentCondition;
import ch.xwr.seicentobilling.entities.PaymentCondition_;

/**
 * Home object for domain model class PaymentCondition.
 *
 * @see PaymentCondition
 */
public class PaymentConditionDAO extends JpaDataAccessObject.Default<PaymentCondition, Long> {
	public PaymentConditionDAO() {
		super(PaymentCondition.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<PaymentCondition> findByCode(final String name) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<String> nameParameter = criteriaBuilder.parameter(String.class, "name");

		final CriteriaQuery<PaymentCondition> criteriaQuery = criteriaBuilder.createQuery(PaymentCondition.class);

		final Root<PaymentCondition> root = criteriaQuery.from(PaymentCondition.class);

		criteriaQuery.where(criteriaBuilder.equal(criteriaBuilder.upper(root.get(PaymentCondition_.pacCode)),
				criteriaBuilder.upper(nameParameter)));

		final TypedQuery<PaymentCondition> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(nameParameter, name);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<PaymentCondition> findAllActive() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<PaymentCondition> criteriaQuery = criteriaBuilder.createQuery(PaymentCondition.class);

		final Root<PaymentCondition> root = criteriaQuery.from(PaymentCondition.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(PaymentCondition_.pacState), criteriaBuilder.literal(1)));

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(PaymentCondition_.pacNbrOfDays)));

		final TypedQuery<PaymentCondition> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}
}