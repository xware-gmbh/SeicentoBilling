package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.rapidclipse.framework.server.jpa.dal.JpaDataAccessObject;

import ch.xwr.seicentobilling.entities.Customer;
import ch.xwr.seicentobilling.entities.Customer_;

/**
 * Home object for domain model class Customer.
 *
 * @see Customer
 */
public class CustomerDAO extends JpaDataAccessObject.Default<Customer, Long> {
	public CustomerDAO() {
		super(Customer.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Customer> findAllCustomers() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<Customer> criteriaQuery = criteriaBuilder.createQuery(Customer.class);

		final Root<Customer> root = criteriaQuery.from(Customer.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(Customer_.cusState), criteriaBuilder.literal(1)));

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(Customer_.cusName)),
				criteriaBuilder.asc(root.get(Customer_.cusCompany)));

		final TypedQuery<Customer> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Customer> findAllByNumberDesc() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<Customer> criteriaQuery = criteriaBuilder.createQuery(Customer.class);

		final Root<Customer> root = criteriaQuery.from(Customer.class);

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(Customer_.cusNumber)));

		final TypedQuery<Customer> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Customer> findByCompanyAndName(final String company, final String name) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<String> nameParameter = criteriaBuilder.parameter(String.class, "name");
		final ParameterExpression<String> companyParameter = criteriaBuilder.parameter(String.class, "company");

		final CriteriaQuery<Customer> criteriaQuery = criteriaBuilder.createQuery(Customer.class);

		final Root<Customer> root = criteriaQuery.from(Customer.class);

		criteriaQuery.where(criteriaBuilder.and(
				criteriaBuilder.equal(criteriaBuilder.upper(root.get(Customer_.cusName)),
						criteriaBuilder.upper(nameParameter)),
				criteriaBuilder.equal(criteriaBuilder.upper(root.get(Customer_.cusCompany)),
						criteriaBuilder.upper(companyParameter))));

		final TypedQuery<Customer> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(nameParameter, name);
		query.setParameter(companyParameter, company);
		return query.getResultList();
	}
}