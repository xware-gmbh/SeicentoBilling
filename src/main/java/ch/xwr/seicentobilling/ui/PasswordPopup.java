
package ch.xwr.seicentobilling.ui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.flowingcode.vaadin.addons.ironicons.IronIcons;
import com.rapidclipse.framework.security.util.PasswordHasher;
import com.rapidclipse.framework.server.data.converter.ConverterBuilder;
import com.rapidclipse.framework.server.data.format.NumberFormatBuilder;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextArea;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.BeanValidationBinder;

import ch.xwr.seicentobilling.dal.AppUserDAO;
import ch.xwr.seicentobilling.entities.AppUser;
import ch.xwr.seicentobilling.entities.Periode;


public class PasswordPopup extends VerticalLayout
{
	/** Logger initialized */
	private static final Logger LOG = LoggerFactory.getLogger(PasswordPopup.class);

	private final AppUser user;

	/**
	 *
	 */
	public PasswordPopup()
	{
		super();
		this.initUI();
		
		// this.setHeight(Seicento.calculateThemeHeight(Float.parseFloat(this.getHeight()), Lumo.DARK));
		this.user = (AppUser)UI.getCurrent().getSession().getAttribute("appuserbean");
	}
	
	public static Dialog getPopupWindow()
	{
		final Dialog win = new Dialog();
		// win.setSizeFull();
		win.setModal(true);
		win.setResizable(true);
		final Button cancelButton = new Button("", e -> {
			win.close();
		});
		cancelButton.setIcon(VaadinIcon.CLOSE.create());
		cancelButton.getStyle().set("float", "right");
		win.add(cancelButton, new PasswordPopup());
		return win;
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #cmdCancel}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void cmdCancel_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().getSession().setAttribute(String.class, "cmdCancel");
		this.binder.removeBean();
		((Dialog)this.getParent().get()).close();
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #cmdSave}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void cmdSave_onClick(final ClickEvent<Button> event)
	{
		if(this.isPasswordValid())
		{
			final String pw                = this.passwordField1.getValue();
			final byte[] encryptedPassword = PasswordHasher.Sha2().hashPassword(pw.getBytes());
			
			this.user.setPassword(encryptedPassword);
			
			try
			{
				new AppUserDAO().save(this.user);
				
				SeicentoNotification.showInfo("Das Passwort wurde gespeichert");
				PasswordPopup.LOG.debug("New Password set for User " + this.user.getUsername());
				
				((Dialog)this.getParent().get()).close();
			}
			catch(final Exception e)
			{
				PasswordPopup.LOG.error("Could not set password for User " + this.user.getUsername(), e);
			}
		}

	}
	
	private boolean isPasswordValid()
	{
		final String pw1 = this.passwordField1.getValue();
		final String pw2 = this.passwordField2.getValue();

		if(pw1.equals(pw2))
		{
			if(pw1.length() < 6)
			{
				SeicentoNotification.showError("Passwort muss mindestens 6 Zeichen lang sein");
				return false;
			}
			return true;
		}

		SeicentoNotification.showError("Passwörter sind nicht gleich");
		return false;
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout    = new VerticalLayout();
		this.horizontalLayout  = new HorizontalLayout();
		this.icon              = new Icon(VaadinIcon.USER);
		this.label             = new Label();
		this.verticalLayout2   = new VerticalLayout();
		this.textArea          = new TextArea();
		this.formLayout        = new FormLayout();
		this.formItem          = new FormItem();
		this.label2            = new Label();
		this.passwordField1    = new TextField();
		this.formItem3         = new FormItem();
		this.label3            = new Label();
		this.passwordField2    = new TextField();
		this.horizontalLayout2 = new HorizontalLayout();
		this.cmdSave           = new Button();
		this.cmdCancel         = new Button();
		this.binder            = new BeanValidationBinder<>(Periode.class);

		this.label.setText("Passwort setzen");
		this.textArea.setValue("Erlaubt das Setzen eines neuen Passwortes für den aktuellen User.");
		this.formLayout.setResponsiveSteps(
			new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("500px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("1000px", 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));
		this.label2.setText("Neues Passwort");
		this.label3.setText("Wiederholen");
		this.cmdSave.setText("Speichern");
		this.cmdSave.setIcon(IronIcons.SAVE.create());
		this.cmdCancel.setText("Schliessen");
		this.cmdCancel.setIcon(IronIcons.CANCEL.create());

		this.binder.forField(this.passwordField1).withNullRepresentation("").bind("perName");
		this.binder.forField(this.passwordField2).withNullRepresentation("").withConverter(
			ConverterBuilder.StringToInteger().numberFormatBuilder(NumberFormatBuilder.Integer().pattern("####"))
				.build())
			.bind("perYear");

		this.label.setSizeUndefined();
		this.horizontalLayout.add(this.icon, this.label);
		this.horizontalLayout.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER, this.icon);
		this.horizontalLayout.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER, this.label);
		this.textArea.setWidthFull();
		this.textArea.setHeight(null);
		this.verticalLayout2.add(this.textArea);
		this.label2.setSizeUndefined();
		this.label2.getElement().setAttribute("slot", "label");
		this.passwordField1.setWidth("50%");
		this.passwordField1.setHeight(null);
		this.formItem.add(this.label2, this.passwordField1);
		this.label3.setSizeUndefined();
		this.label3.getElement().setAttribute("slot", "label");
		this.passwordField2.setWidth("50%");
		this.passwordField2.setHeight(null);
		this.formItem3.add(this.label3, this.passwordField2);
		this.formLayout.add(this.formItem, this.formItem3);
		this.cmdSave.setSizeUndefined();
		this.cmdCancel.setSizeUndefined();
		this.horizontalLayout2.add(this.cmdSave, this.cmdCancel);
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight("30px");
		this.verticalLayout2.setWidthFull();
		this.verticalLayout2.setHeight(null);
		this.formLayout.setWidthFull();
		this.formLayout.setHeight(null);
		this.horizontalLayout2.setWidthFull();
		this.horizontalLayout2.setHeight(null);
		this.verticalLayout.add(this.horizontalLayout, this.verticalLayout2, this.formLayout, this.horizontalLayout2);
		this.verticalLayout.setWidth("80%");
		this.verticalLayout.setHeight("50%");
		this.add(this.verticalLayout);
		this.setSizeFull();

		this.cmdSave.addClickListener(this::cmdSave_onClick);
		this.cmdCancel.addClickListener(this::cmdCancel_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout                    formLayout;
	private Button                        cmdSave, cmdCancel;
	private TextArea                      textArea;
	private BeanValidationBinder<Periode> binder;
	private VerticalLayout                verticalLayout, verticalLayout2;
	private HorizontalLayout              horizontalLayout, horizontalLayout2;
	private Label                         label, label2, label3;
	private Icon                          icon;
	private TextField                     passwordField1, passwordField2;
	private FormItem                      formItem, formItem3;
	// </generated-code>
	
}
