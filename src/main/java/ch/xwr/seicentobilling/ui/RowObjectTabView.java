
package ch.xwr.seicentobilling.ui;

import java.util.Arrays;
import java.util.Optional;

import com.rapidclipse.framework.server.data.renderer.CaptionRenderer;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.ItemClickEvent;
import com.vaadin.flow.component.grid.ItemDoubleClickEvent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.router.Route;

import ch.xwr.seicentobilling.dal.RowObjectDAO;
import ch.xwr.seicentobilling.entities.Entity;
import ch.xwr.seicentobilling.entities.RowObject;


@Route("rowobject")
public class RowObjectTabView extends VerticalLayout
{
	/**
	 *
	 */
	public RowObjectTabView()
	{
		super();
		this.initUI();

		// Sort it
		// final Object [] properties={"objChanged","objRowId"};
		// final boolean [] ordering={false, false};
		// this.table.sort(properties, ordering);
		
		this.setDefaultFilter();
	}
	
	private void setDefaultFilter()
	{
		/*
		 * final LocalDate ld1 = LocalDate.now().minusDays(1);
		 * final Date yesterday = java.sql.Timestamp.valueOf(ld1.atStartOfDay());
		 * final Date[] dateArray = new Date[] { yesterday };
		 *
		 * final FilterData[] fd = new FilterData[]{new FilterData("objChanged", new FilterOperator.Greater(),
		 * dateArray)};
		 * this.containerFilterComponent.setFilterData(fd);
		 */
	}

	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_onItemClick(final ItemClickEvent<RowObject> event)
	{
		// Notification.show("Component Triggered ", 5000, Notification.Position.BOTTOM_END);
		
	}

	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_onItemDoubleClick(final ItemDoubleClickEvent<RowObject> event)
	{
		// Notification.show("Event Triggered ", 5000, Notification.Position.BOTTOM_END);
		if(event.getItem() != null)
		{
			final RowObject objBean = event.getItem();
			final Dialog    win     = RowObjectView.getPopupWindow();
			//
			win.add(new RowObjectView(objBean.getObjRowId(), objBean.getEntity().getEntName()));
			win.open();
		}
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout  = new VerticalLayout();
		this.filterComponent = new FilterComponent();
		this.grid            = new Grid<>(RowObject.class, false);
		
		this.setSpacing(false);
		this.setPadding(false);
		this.verticalLayout.setPadding(false);
		this.grid.addColumn(v -> Optional.ofNullable(v).map(RowObject::getEntity).map(Entity::getEntName).orElse(null))
			.setKey("entity.entName").setHeader("Tabelle").setSortable(true);
		this.grid.addColumn(RowObject::getObjRowId).setKey("objRowId").setHeader("Objekt Id").setSortable(true);
		this.grid.addColumn(RowObject::getObjChngcnt).setKey("objChngcnt").setHeader("Anderungszähler")
			.setSortable(true);
		this.grid.addColumn(RowObject::getObjAdded).setKey("objAdded").setHeader("Erstellt am").setSortable(true);
		this.grid.addColumn(RowObject::getObjAddedBy).setKey("objAddedBy").setHeader("Erstellt von").setSortable(true);
		this.grid.addColumn(RowObject::getObjChanged).setKey("objChanged").setHeader("Geändert am").setSortable(true);
		this.grid.addColumn(RowObject::getObjChangedBy).setKey("objChangedBy").setHeader("Geändert von")
			.setSortable(true);
		this.grid.addColumn(RowObject::getObjDeleted).setKey("objDeleted").setHeader("Gelöscht am").setSortable(true);
		this.grid.addColumn(RowObject::getObjDeletedBy).setKey("objDeletedBy").setHeader("Gelöscht von")
			.setSortable(true);
		this.grid.addColumn(new CaptionRenderer<>(RowObject::getObjState)).setKey("objState").setHeader("Status")
			.setSortable(true);
		this.grid.setDataProvider(DataProvider.ofCollection(new RowObjectDAO().findAll()));
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		
		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("objAddedBy", "objChangedBy", "objDeletedBy"),
			Arrays.asList("entity.entName", "objAdded", "objAddedBy", "objChanged", "objChangedBy", "objChngcnt",
				"objDeleted", "objDeletedBy", "objRowId", "objState")));
		
		this.filterComponent.setWidthFull();
		this.filterComponent.setHeight(null);
		this.grid.setSizeFull();
		this.verticalLayout.add(this.filterComponent, this.grid);
		this.verticalLayout.setFlexGrow(1.0, this.grid);
		this.verticalLayout.setSizeFull();
		this.add(this.verticalLayout);
		this.setSizeFull();
		
		this.grid.addItemClickListener(this::grid_onItemClick);
		this.grid.addItemDoubleClickListener(this::grid_onItemDoubleClick);
	} // </generated-code>

	// <generated-code name="variables">
	private VerticalLayout  verticalLayout;
	private FilterComponent filterComponent;
	private Grid<RowObject> grid;
	// </generated-code>
	
}
