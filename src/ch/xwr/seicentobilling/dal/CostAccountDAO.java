
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.xdev.dal.JPADAO;

import ch.xwr.seicentobilling.entities.CostAccount;
import ch.xwr.seicentobilling.entities.CostAccount_;

/**
 * Home object for domain model class CostAccount.
 *
 * @see CostAccount
 */
public class CostAccountDAO extends JPADAO<CostAccount, Long> {
	public CostAccountDAO() {
		super(CostAccount.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<CostAccount> findByName(final String name) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<String> nameParameter = criteriaBuilder.parameter(String.class, "name");

		final CriteriaQuery<CostAccount> criteriaQuery = criteriaBuilder.createQuery(CostAccount.class);

		final Root<CostAccount> root = criteriaQuery.from(CostAccount.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(CostAccount_.csaName), nameParameter));

		final TypedQuery<CostAccount> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(nameParameter, name);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<CostAccount> findAllActive() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<CostAccount> criteriaQuery = criteriaBuilder.createQuery(CostAccount.class);

		final Root<CostAccount> root = criteriaQuery.from(CostAccount.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(CostAccount_.csaState), criteriaBuilder.literal(1)));

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(CostAccount_.csaName)));

		final TypedQuery<CostAccount> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<CostAccount> findAllOrderByName() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<CostAccount> criteriaQuery = criteriaBuilder.createQuery(CostAccount.class);

		final Root<CostAccount> root = criteriaQuery.from(CostAccount.class);

		criteriaQuery.orderBy(criteriaBuilder.asc(root.get(CostAccount_.csaName)));

		final TypedQuery<CostAccount> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}
}