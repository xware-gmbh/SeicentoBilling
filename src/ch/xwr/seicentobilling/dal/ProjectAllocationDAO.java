
package ch.xwr.seicentobilling.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import com.xdev.dal.JPADAO;

import ch.xwr.seicentobilling.entities.CostAccount;
import ch.xwr.seicentobilling.entities.Project;
import ch.xwr.seicentobilling.entities.ProjectAllocation;
import ch.xwr.seicentobilling.entities.ProjectAllocation_;
import ch.xwr.seicentobilling.entities.Project_;

/**
 * Home object for domain model class Project.
 *
 * @see Project
 */
public class ProjectAllocationDAO extends JPADAO<ProjectAllocation, Long> {
	public ProjectAllocationDAO() {
		super(ProjectAllocation.class);
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<ProjectAllocation> findByProject(final Project pro) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<Project> proParameter = criteriaBuilder.parameter(Project.class, "pro");

		final CriteriaQuery<ProjectAllocation> criteriaQuery = criteriaBuilder.createQuery(ProjectAllocation.class);

		final Root<ProjectAllocation> root = criteriaQuery.from(ProjectAllocation.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(ProjectAllocation_.project), proParameter));

		final TypedQuery<ProjectAllocation> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(proParameter, pro);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<ProjectAllocation> findByCostAccount(final CostAccount csa) {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final ParameterExpression<CostAccount> csaParameter = criteriaBuilder.parameter(CostAccount.class, "csa");

		final CriteriaQuery<ProjectAllocation> criteriaQuery = criteriaBuilder.createQuery(ProjectAllocation.class);

		final Root<ProjectAllocation> root = criteriaQuery.from(ProjectAllocation.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(ProjectAllocation_.costAccount), csaParameter));

		final TypedQuery<ProjectAllocation> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(csaParameter, csa);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<ProjectAllocation> findAllActiveProjects() {
		final EntityManager entityManager = em();

		final CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();

		final CriteriaQuery<ProjectAllocation> criteriaQuery = criteriaBuilder.createQuery(ProjectAllocation.class);

		final Root<ProjectAllocation> root = criteriaQuery.from(ProjectAllocation.class);

		criteriaQuery.where(criteriaBuilder.equal(root.get(ProjectAllocation_.project).get(Project_.proState),
				criteriaBuilder.literal(1)));

		criteriaQuery.orderBy(criteriaBuilder.desc(root.get(ProjectAllocation_.praStartDate)));

		final TypedQuery<ProjectAllocation> query = entityManager.createQuery(criteriaQuery);
		return query.getResultList();
	}

}