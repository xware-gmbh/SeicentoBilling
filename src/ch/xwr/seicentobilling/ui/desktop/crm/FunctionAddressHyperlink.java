
package ch.xwr.seicentobilling.ui.desktop.crm;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

import org.jfree.util.Log;

import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.server.ExternalResource;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.xdev.res.ApplicationResource;
import com.xdev.ui.XdevHorizontalLayout;
import com.xdev.ui.XdevLink;
import com.xdev.ui.entitycomponent.table.XdevTable;

import ch.xwr.seicentobilling.entities.Address;

public class FunctionAddressHyperlink extends XdevHorizontalLayout {

	public static class Generator implements ColumnGenerator {
		@Override
		public Object generateCell(final Table table, final Object itemId, final Object columnId) {

			return new FunctionAddressHyperlink(table, itemId, columnId);
		}
	}

	private final Table customizedTable;
	private final Object itemId;
	private final Object columnId;

	private FunctionAddressHyperlink(final Table customizedTable, final Object itemId, final Object columnId) {
		super();

		this.customizedTable = customizedTable;
		this.itemId = itemId;
		this.columnId = columnId;

		this.initUI();

		//this.btnHyperlink.setDescription(this.getBean().getAdrCity());

		final String link = getGoogleLink(getBean());
		try {
			this.linkMaps.setResource(new ExternalResource(new URL(link)));
		} catch (final MalformedURLException e) {
			Log.error(e);
		}


		//Downloader init
//		final Resource res = getInputStream();
//		final FileDownloader fd = new FileDownloader(res);
//		fd.extend(this.btnHyperlink);
	}

	public Table getTable() {
		return this.customizedTable;
	}

	public Object getItemId() {
		return this.itemId;
	}

	public Object getColumnId() {
		return this.columnId;
	}

	@SuppressWarnings("unchecked")
	public Address getBean() {
		return ((XdevTable<Address>) getTable()).getBeanContainerDataSource().getItem(getItemId()).getBean();
	}

//	private void launchLink() {
//		final Address act = getBean();
//		final String url = getGoogleLink(act);
//
//		try {
//	        if (Desktop.isDesktopSupported()) {
//	            // Windows
//	        	System.out.println("Link - Desktop supported: " + url);
//	            Desktop.getDesktop().browse(new URI(url));
//	        } else {
//	            // Ubuntu
//	            final Runtime runtime = Runtime.getRuntime();
//	            runtime.exec("/usr/bin/firefox -new-window " + url);
//	        }
//
//		} catch (final Exception e) {
//			e.printStackTrace();
//		}
//	}

	private String getGoogleLink(final Address adr) {
		final String uripre = "https://www.google.com/maps/search/?api=1&query=";
		String q = adr.getAdrCity();
		if (adr.getAdrLine0()!= null && !adr.getAdrLine0().trim().isEmpty()) {
			q = q + ", " + adr.getAdrLine0();
		}
		if (adr.getCustomer().getCusCompany()!= null && !adr.getCustomer().getCusCompany().trim().isEmpty()) {
			q = q + ", " + adr.getCustomer().getCusCompany();
		}

		try {
			if (q != null) {
				q = URLEncoder.encode(q, "UTF-8");
			} else {
				q = "";
			}
		} catch (final UnsupportedEncodingException e) {
			Log.error(e);
		}
		return uripre + q;
	}

	/**
	 * Event handler delegate method for the {@link XdevHorizontalLayout}.
	 *
	 * @see LayoutClickListener#layoutClick(LayoutClickEvent)
	 * @eventHandlerDelegate
	 */
	private void this_layoutClick(final LayoutClickEvent event) {
		selectItem();
	}

	private void selectItem() {
		getTable().select(getItemId());
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.linkMaps = new XdevLink();

		this.setSpacing(false);
		this.setMargin(new MarginInfo(false));
		this.linkMaps.setTargetName("_blank");
		this.linkMaps.setIcon(new ApplicationResource(this.getClass(), "WebContent/WEB-INF/resources/images/gmaps32.PNG"));
		this.linkMaps.setDescription("Link to Google Maps");

		this.linkMaps.setSizeUndefined();
		this.addComponent(this.linkMaps);
		this.setExpandRatio(this.linkMaps, 20.0F);
		this.setSizeUndefined();

		this.addLayoutClickListener(event -> this.this_layoutClick(event));
	} // </generated-code>

	// <generated-code name="variables">
	private XdevLink linkMaps;
	// </generated-code>


}
